const User = require('../models/user')
const bcrypt = require('bcryptjs')
const helpers = require('../helpers/auth-helper')

const userController = {
  getSignIn: (req, res) => {
    return res.render('signin')
  },
  signIn: (req, res) => {
    return res.redirect('/')
  },
  getSignUp: (req, res) => {
    return res.render('signup')
  },
  signUp: async (req, res, next) => {
    const { name, email, password, confirmPassword } = req.body
    if (!name.trim() || !email.trim() || !password.trim()) {
      return res.render('signup', { name, email, password, confirmPassword, message: '欄位未正確填寫' })
    }
    if (password !== confirmPassword) {
      return res.render('signup', { name, email, password, confirmPassword, message: '密碼不一致' })
    }

    try {
      const usedEmail = await User.findOne({ email })
      if (usedEmail) {
        return res.render('signup', { name, email, password, confirmPassword, message: '信箱已被使用' })
      }
      const usedName = await User.findOne({ name })
      if (usedName) {
        return res.render('signup', { name, email, password, confirmPassword, message: '名稱已被使用' })
      }

      const hashPassword = await bcrypt.hash(password, 10)
      await User.create({
        name,
        email,
        password: hashPassword
      })
      req.flash('success_msg', '註冊成功，請重新登入')
      res.redirect('/signin')
    } catch (err) {
      return next(err)
    }
  },
  signOut: (req, res) => {
    req.logOut(() => { })
    return res.redirect('/signin')
  },
  getProfile: async (req, res, next) => {
    const { userId } = req.params
    const loginUser = helpers.getUser(req)
    // 判斷是否本人
    if (loginUser._id.toString() !== userId) return res.redirect('back')

    try {
      const user = await User.findById(userId)
      const { email, name, password, avatar, introduction, createdAt, updatedAt } = user
      // 是否查詢到user
      if (!user) {
        req.flash('danger_msg', '該使用者不存在')
        return res.redirect('back')
      }
      // 查詢成功
      return res.render('profile', { email, name, password, avatar, introduction, createdAt, updatedAt })
    } catch (err) {
      next(err)
    }

  }
}

module.exports = userController